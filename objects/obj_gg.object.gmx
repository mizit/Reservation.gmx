<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_gg</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>my_speed = 0;

enum GG
{
    STOP,
    MOVE,
    FORCE,
    DEATH 
}

status = GG.STOP;
nodes = obj_ground_control.nodes;

list_tmp_x = ds_list_create();
list_tmp_y = ds_list_create();

list_border_x = ds_list_create();
list_border_y = ds_list_create();
for (var i = 0; i &lt; ds_grid_width(nodes) - 2; i++)
{
    ds_list_add(list_border_x, i + 1, i + 1, 1, ds_grid_width(nodes) - 2);
    ds_list_add(list_border_y, 1, ds_grid_height(nodes) - 2, i + 1, i + 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>old_dir = direction;
var l_x = real_to_grid_x(x);
var l_y = real_to_grid_y(y);
if (status != GG.DEATH)
{
    if (keyboard_check_pressed(vk_left))
    {
        status = GG.FORCE;
        direction = 180;
    }
    if (keyboard_check_pressed(vk_right))
    {
        status = GG.FORCE;
        direction = 0;
    }
    if (keyboard_check_pressed(vk_up))
    {
        status = GG.FORCE;
        direction = 90;
    }
    if (keyboard_check_pressed(vk_down))
    {
        status = GG.FORCE;
        direction = 270;
    }
}
if ((abs(direction - old_dir) == 180) &amp;&amp; (nodes[# l_x, l_y] == NODE.FREE))
{
    direction = old_dir;
}

if (status == GG.MOVE)
{
    behavior_move();
}

if (status == GG.FORCE)
{
    behavior_force();
}

if (status == GG.DEATH)
{
    speed = 0;
}

if (obj_ground_control.nodes[# l_x, l_y] == NODE.FREE)
{
    obj_ground_control.nodes[# l_x, l_y] = NODE.TEMP;
    ds_list_add(list_tmp_x, l_x);
    ds_list_add(list_tmp_y, l_y);
}

if (obj_ground_control.nodes[# l_x, l_y] == NODE.TEMP) &amp;&amp;
    (check_next_node() == NODE.BORDER)
{
    while (ds_list_size(list_tmp_x) &gt; 0)
    {
        obj_ground_control.nodes[# list_tmp_x[| 0], list_tmp_y[| 0]] = NODE.BORDER;
        ds_list_add(list_border_x, list_tmp_x[| 0]);
        ds_list_add(list_border_y, list_tmp_y[| 0]);
        ds_list_delete(list_tmp_x, 0);
        ds_list_delete(list_tmp_y, 0);
    }
    var x1, x2, y1, y2;
    var size1 = 0, size2 = 0;
    /*if ((direction == 0) || (direction == 180))
    {
        x1 = l_x;
        y1 = l_y - 1;
        x2 = l_x;
        y2 = l_y + 1;
    }
    else
    {
        x1 = l_x - 1;
        y1 = l_y;
        x2 = l_x + 1;
        y2 = l_y;
    }*/
    with (obj_ground_control)
    {
        var f = 0;
        for (var i = 2; i &lt; grid_size; i++)
        {
            for (var j = 2; j &lt; grid_size; j++)
            {
                if (nodes[# i, j] == NODE.FREE) &amp;&amp; (!f)
                {
                    x1 = i;
                    y1 = j;
                    size1 = field_size(x1, y1, NODE.ONE);
                    f = 1;
                }
                if (nodes[# i, j] == NODE.FREE) &amp;&amp; (f)
                {
                    x2 = i;
                    y2 = j;
                    size2 = field_size(x2, y2, NODE.TWO);
                }
            }
        }
    }
    
    with (obj_ground_control)
    {
        for (var i = 0; i &lt; grid_size; i++)
        {
            for (var j = 0; j &lt; grid_size; j++)
            {
                if (size1 &lt; size2)
                {
                    if (nodes[# i, j] &amp; NODE.ONE)
                    {
                        nodes[# i, j] = NODE.BLOCKED;
                    }
                    if (nodes[# i, j] &amp; NODE.TWO)
                    {
                        nodes[# i, j] &amp;=~ NODE.TWO;
                    }
                }
                else
                {
                    if (nodes[# i, j] &amp; NODE.TWO)
                    {
                        nodes[# i, j] = NODE.BLOCKED;
                    }
                    if (nodes[# i, j] &amp; NODE.ONE)
                    {
                        nodes[# i, j] &amp;=~ NODE.ONE;
                    }
                }
            }
        }
    }
    for (var i = 0; i &lt; ds_list_size(list_border_x); i++)
    {
        if ((nodes[# list_border_x[| i] - 1, list_border_y[| i] - 1] != NODE.FREE) &amp;&amp;
        (nodes[# list_border_x[| i] - 1, list_border_y[| i] - 1] != NODE.DEATH) &amp;&amp;
        (nodes[# list_border_x[| i] - 1, list_border_y[| i] + 1] != NODE.FREE) &amp;&amp;
        (nodes[# list_border_x[| i] - 1, list_border_y[| i] + 1] != NODE.DEATH) &amp;&amp;
        (nodes[# list_border_x[| i] + 1, list_border_y[| i] - 1] != NODE.FREE) &amp;&amp;
        (nodes[# list_border_x[| i] + 1, list_border_y[| i] - 1] != NODE.DEATH) &amp;&amp;
        (nodes[# list_border_x[| i] + 1, list_border_y[| i] + 1] != NODE.FREE) &amp;&amp;
        (nodes[# list_border_x[| i] + 1, list_border_y[| i] + 1] != NODE.DEATH))
        {
            nodes[# list_border_x[| i], list_border_y[| i]] = NODE.BLOCKED;
            ds_list_delete(list_border_x, i);
            ds_list_delete(list_border_y, i);
            i--;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_set_colour(c_black);
draw_set_halign(fa_center);
switch (status)
{
    case GG.STOP:
    {
        draw_text(x, y - 25, "STOP");
        break;
    }
    case GG.MOVE:
    {
        draw_text(x, y - 25, "MOVE");
        break;
    }
    case GG.FORCE:
    {
        draw_text(x, y - 25, "FORCE");
        break;
    }
    case GG.DEATH:
    {
        draw_text(x, y - 25, "DEATH");
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
