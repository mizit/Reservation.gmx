<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_ground_control</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x_offset = x;
y_offset = y;
step = 8;
grid_size = 90;
nodes = ds_grid_create(grid_size + 2, grid_size + 2);
ds_grid_set_region(nodes, 0, 0, grid_size + 1, grid_size + 1, NODE.BLOCKED);
ds_grid_set_region(nodes, 1, 1, grid_size - 2, grid_size - 2, NODE.BORDER);
ds_grid_set_region(nodes, 2, 2, grid_size - 3, grid_size - 3, NODE.FREE);

instance_create(x_offset + step, y_offset + step, obj_gg);
obj_gg.my_speed = step;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (var i = 0; i &lt; grid_size; i++)
{
    for (var j = 0; j &lt; grid_size; j++)
    {
        switch(nodes[# i, j])
        {
            case NODE.FREE:
            {
                //draw_sprite(s_node_free, -1, x_offset + i * step, y_offset + j * step);
                break;
            }
            case NODE.BLOCKED:
            {
                draw_sprite(s_node_blocked, -1, x_offset + i * step, y_offset + j * step);
                break;
            }
            case NODE.TEMP:
            {
                draw_sprite(s_node_temp, -1, x_offset + i * step, y_offset + j * step);
                break;
            }
            case NODE.BORDER:
            {
                draw_sprite(s_node_border, -1, x_offset + i * step, y_offset + j * step);
                break;
            }
            case NODE.DEATH:
            {
                draw_sprite(s_node_death, -1, x_offset + i * step, y_offset + j * step);
                break;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
